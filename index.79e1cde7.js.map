{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\n// Uncomment the next lines to use your game instance in the browser\nconst $09e991522ca7e64e$var$initialState = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.initialState = initialState;\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n    }\n    moveLeft() {}\n    moveRight() {}\n    moveUp() {}\n    moveDown() {}\n    /**\n   * @returns {number}\n   */ getScore() {}\n    /**\n   * @returns {number[][]}\n   */ getState() {}\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {}\n    /**\n   * Starts the game.\n   */ start() {}\n    /**\n   * Resets the game.\n   */ restart() {}\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$initialState);\nlet $09e991522ca7e64e$var$filledCells = 0;\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nlet $09e991522ca7e64e$var$state = structuredClone($09e991522ca7e64e$var$initialState);\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.className === \"button restart\") $09e991522ca7e64e$var$game.restart();\n    if ($09e991522ca7e64e$var$button.className === \"button start\") $09e991522ca7e64e$var$game.start();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.keyCode){\n        case 37:\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 38:\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 39:\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case 40:\n            $09e991522ca7e64e$var$game.moveDown();\n    }\n    if ([\n        ...$09e991522ca7e64e$var$cells\n    ].some((cell)=>cell.textContent === \"2048\")) $09e991522ca7e64e$var$messageWin.className = \"message message-win\";\n    if ($09e991522ca7e64e$var$filledCells === $09e991522ca7e64e$var$cells.length && !$09e991522ca7e64e$var$canGameContinue()) $09e991522ca7e64e$var$messageLose.className = \"message message-lose\";\n});\n$09e991522ca7e64e$var$game.start = ()=>{\n    $09e991522ca7e64e$var$messageStart.className = \"message message-start hidden\";\n    $09e991522ca7e64e$var$messageLose.className = \"message message-lose hidden\";\n    $09e991522ca7e64e$var$messageWin.className = \"message message-win hidden\";\n    $09e991522ca7e64e$var$button.className = \"button restart\";\n    $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    $09e991522ca7e64e$var$addRandomNumInCells();\n    $09e991522ca7e64e$var$addRandomNumInCells();\n};\n$09e991522ca7e64e$var$game.restart = ()=>{\n    $09e991522ca7e64e$var$filledCells = 0;\n    $09e991522ca7e64e$var$score.textContent = 0;\n    $09e991522ca7e64e$var$state = structuredClone($09e991522ca7e64e$var$initialState);\n    $09e991522ca7e64e$var$game.start();\n};\n$09e991522ca7e64e$var$game.getScore = ()=>{\n    let totalScore = 0;\n    for (const raw of $09e991522ca7e64e$var$state)totalScore += raw.reduce((sum, num)=>sum + num);\n    return totalScore;\n};\nfunction $09e991522ca7e64e$var$addRandomNumInCells() {\n    let randomRowIndex = Math.round(Math.random() * 3);\n    let randomColumnIndex = Math.round(Math.random() * 3);\n    const cellTextContent = Math.random() < 0.1 ? 4 : 2;\n    while($09e991522ca7e64e$var$state[randomRowIndex][randomColumnIndex] > 0 && $09e991522ca7e64e$var$filledCells < $09e991522ca7e64e$var$cells.length){\n        randomRowIndex = Math.round(Math.random() * 3);\n        randomColumnIndex = Math.round(Math.random() * 3);\n    }\n    $09e991522ca7e64e$var$state[randomRowIndex][randomColumnIndex] = cellTextContent;\n    $09e991522ca7e64e$var$filledCells++;\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$changeRealState();\n}\nfunction $09e991522ca7e64e$var$changeRealState() {\n    for(let i = 0; i < $09e991522ca7e64e$var$cells.length; i++){\n        $09e991522ca7e64e$var$cells[i].textContent = $09e991522ca7e64e$var$state[Math.floor(i / 4)][i % 4] === 0 ? \"\" : $09e991522ca7e64e$var$state[Math.floor(i / 4)][i % 4];\n        $09e991522ca7e64e$var$cells[i].className = $09e991522ca7e64e$var$state[Math.floor(i / 4)][i % 4] === 0 ? \"field-cell\" : `field-cell field-cell--${$09e991522ca7e64e$var$state[Math.floor(i / 4)][i % 4]}`;\n    }\n}\nfunction $09e991522ca7e64e$var$canGameContinue() {\n    let isSomethingChanged = false;\n    for(let i = $09e991522ca7e64e$var$state.length - 2; i >= 0; i--){\n        for(let j = 0; j < $09e991522ca7e64e$var$state[i].length; j++)if ($09e991522ca7e64e$var$state[i + 1][j] === $09e991522ca7e64e$var$state[i][j] && $09e991522ca7e64e$var$state[i][j] !== 0) isSomethingChanged = true;\n    }\n    for(let i = $09e991522ca7e64e$var$state.length - 1; i > 0; i--){\n        for(let j = 0; j < $09e991522ca7e64e$var$state[i].length; j++)if ($09e991522ca7e64e$var$state[i - 1][j] === $09e991522ca7e64e$var$state[i][j] && $09e991522ca7e64e$var$state[i][j] !== 0) isSomethingChanged = true;\n    }\n    for(let i = 0; i < $09e991522ca7e64e$var$state.length; i++){\n        for(let j = 1; j < $09e991522ca7e64e$var$state[i].length; j++)if ($09e991522ca7e64e$var$state[i][j - 1] === $09e991522ca7e64e$var$state[i][j] && $09e991522ca7e64e$var$state[i][j] !== 0) isSomethingChanged = true;\n    }\n    for(let i = 0; i < $09e991522ca7e64e$var$state.length; i++){\n        for(let j = $09e991522ca7e64e$var$state[i].length - 2; j >= 0; j--)if ($09e991522ca7e64e$var$state[i][j + 1] === $09e991522ca7e64e$var$state[i][j] && $09e991522ca7e64e$var$state[i][j] !== 0) isSomethingChanged = true;\n    }\n    return isSomethingChanged;\n}\n$09e991522ca7e64e$var$game.moveDown = ()=>{\n    let isSomethingChanged = false;\n    const jWasUsed = [];\n    for(let n = 0; n < $09e991522ca7e64e$var$state.length; n++){\n        for(let i = $09e991522ca7e64e$var$state.length - 2; i >= 0; i--)for(let j = 0; j < $09e991522ca7e64e$var$state[i].length; j++){\n            if ($09e991522ca7e64e$var$state[i + 1][j] === $09e991522ca7e64e$var$state[i][j] && $09e991522ca7e64e$var$state[i][j] !== 0 && jWasUsed.every((ind)=>ind !== j)) {\n                if ($09e991522ca7e64e$var$state[0][j] !== 0 && $09e991522ca7e64e$var$state[3][j] !== 0 && $09e991522ca7e64e$var$state[0][j] === $09e991522ca7e64e$var$state[1][j] && $09e991522ca7e64e$var$state[2][j] === $09e991522ca7e64e$var$state[3][j]) {\n                    $09e991522ca7e64e$var$state[3][j] = $09e991522ca7e64e$var$state[2][j] * 2;\n                    $09e991522ca7e64e$var$state[2][j] = $09e991522ca7e64e$var$state[1][j] * 2;\n                    $09e991522ca7e64e$var$state[1][j] = 0;\n                    $09e991522ca7e64e$var$state[0][j] = 0;\n                    isSomethingChanged = true;\n                    jWasUsed.push(j);\n                    $09e991522ca7e64e$var$filledCells -= 2;\n                    continue;\n                }\n                $09e991522ca7e64e$var$state[i + 1][j] *= 2;\n                $09e991522ca7e64e$var$state[i][j] = 0;\n                isSomethingChanged = true;\n                jWasUsed.push(j);\n                $09e991522ca7e64e$var$filledCells--;\n            }\n            if ($09e991522ca7e64e$var$state[i + 1][j] === 0 && $09e991522ca7e64e$var$state[i][j] !== 0) {\n                [$09e991522ca7e64e$var$state[i + 1][j], $09e991522ca7e64e$var$state[i][j]] = [\n                    $09e991522ca7e64e$var$state[i][j],\n                    $09e991522ca7e64e$var$state[i + 1][j]\n                ];\n                isSomethingChanged = true;\n            }\n        }\n    }\n    if (isSomethingChanged) $09e991522ca7e64e$var$addRandomNumInCells();\n};\n$09e991522ca7e64e$var$game.moveUp = ()=>{\n    let isSomethingChanged = false;\n    const jWasUsed = [];\n    for(let n = 0; n < $09e991522ca7e64e$var$state.length; n++){\n        for(let i = $09e991522ca7e64e$var$state.length - 1; i > 0; i--)for(let j = 0; j < $09e991522ca7e64e$var$state[i].length; j++){\n            if ($09e991522ca7e64e$var$state[i - 1][j] === $09e991522ca7e64e$var$state[i][j] && $09e991522ca7e64e$var$state[i][j] !== 0 && jWasUsed.every((ind)=>ind !== j)) {\n                if ($09e991522ca7e64e$var$state[0][j] !== 0 && $09e991522ca7e64e$var$state[3][j] !== 0 && $09e991522ca7e64e$var$state[0][j] === $09e991522ca7e64e$var$state[1][j] && $09e991522ca7e64e$var$state[2][j] === $09e991522ca7e64e$var$state[3][j]) {\n                    $09e991522ca7e64e$var$state[0][j] = $09e991522ca7e64e$var$state[1][j] * 2;\n                    $09e991522ca7e64e$var$state[1][j] = $09e991522ca7e64e$var$state[2][j] * 2;\n                    $09e991522ca7e64e$var$state[2][j] = 0;\n                    $09e991522ca7e64e$var$state[3][j] = 0;\n                    isSomethingChanged = true;\n                    jWasUsed.push(j);\n                    $09e991522ca7e64e$var$filledCells -= 2;\n                    continue;\n                }\n                $09e991522ca7e64e$var$state[i - 1][j] *= 2;\n                $09e991522ca7e64e$var$state[i][j] = 0;\n                isSomethingChanged = true;\n                jWasUsed.push(j);\n                $09e991522ca7e64e$var$filledCells--;\n            }\n            if ($09e991522ca7e64e$var$state[i - 1][j] === 0 && $09e991522ca7e64e$var$state[i][j] !== 0) {\n                [$09e991522ca7e64e$var$state[i - 1][j], $09e991522ca7e64e$var$state[i][j]] = [\n                    $09e991522ca7e64e$var$state[i][j],\n                    $09e991522ca7e64e$var$state[i - 1][j]\n                ];\n                isSomethingChanged = true;\n            }\n        }\n    }\n    if (isSomethingChanged) $09e991522ca7e64e$var$addRandomNumInCells();\n};\n$09e991522ca7e64e$var$game.moveLeft = ()=>{\n    let isSomethingChanged = false;\n    const iWasUsed = [];\n    for(let n = 0; n < $09e991522ca7e64e$var$state.length; n++){\n        for(let i = 0; i < $09e991522ca7e64e$var$state.length; i++)for(let j = 1; j < $09e991522ca7e64e$var$state[i].length; j++){\n            if ($09e991522ca7e64e$var$state[i][j - 1] === $09e991522ca7e64e$var$state[i][j] && $09e991522ca7e64e$var$state[i][j] !== 0 && iWasUsed.every((ind)=>ind !== i)) {\n                if ($09e991522ca7e64e$var$state[i][0] !== 0 && $09e991522ca7e64e$var$state[i][3] !== 0 && $09e991522ca7e64e$var$state[i][0] === $09e991522ca7e64e$var$state[i][1] && $09e991522ca7e64e$var$state[i][2] === $09e991522ca7e64e$var$state[i][3]) {\n                    $09e991522ca7e64e$var$state[i][0] = $09e991522ca7e64e$var$state[i][1] * 2;\n                    $09e991522ca7e64e$var$state[i][1] = $09e991522ca7e64e$var$state[i][2] * 2;\n                    $09e991522ca7e64e$var$state[i][2] = 0;\n                    $09e991522ca7e64e$var$state[i][3] = 0;\n                    isSomethingChanged = true;\n                    iWasUsed.push(i);\n                    $09e991522ca7e64e$var$filledCells -= 2;\n                    continue;\n                }\n                $09e991522ca7e64e$var$state[i][j - 1] *= 2;\n                $09e991522ca7e64e$var$state[i][j] = 0;\n                isSomethingChanged = true;\n                iWasUsed.push(i);\n                $09e991522ca7e64e$var$filledCells--;\n            }\n            if ($09e991522ca7e64e$var$state[i][j - 1] === 0 && $09e991522ca7e64e$var$state[i][j] !== 0) {\n                [$09e991522ca7e64e$var$state[i][j - 1], $09e991522ca7e64e$var$state[i][j]] = [\n                    $09e991522ca7e64e$var$state[i][j],\n                    $09e991522ca7e64e$var$state[i][j - 1]\n                ];\n                isSomethingChanged = true;\n            }\n        }\n    }\n    if (isSomethingChanged) $09e991522ca7e64e$var$addRandomNumInCells();\n};\n$09e991522ca7e64e$var$game.moveRight = ()=>{\n    let isSomethingChanged = false;\n    const iWasUsed = [];\n    for(let n = 0; n < $09e991522ca7e64e$var$state.length; n++){\n        for(let i = 0; i < $09e991522ca7e64e$var$state.length; i++)for(let j = $09e991522ca7e64e$var$state[i].length - 2; j >= 0; j--){\n            if ($09e991522ca7e64e$var$state[i][j + 1] === $09e991522ca7e64e$var$state[i][j] && $09e991522ca7e64e$var$state[i][j] !== 0 && iWasUsed.every((ind)=>ind !== i)) {\n                if ($09e991522ca7e64e$var$state[i][0] !== 0 && $09e991522ca7e64e$var$state[i][3] !== 0 && $09e991522ca7e64e$var$state[i][0] === $09e991522ca7e64e$var$state[i][1] && $09e991522ca7e64e$var$state[i][2] === $09e991522ca7e64e$var$state[i][3]) {\n                    $09e991522ca7e64e$var$state[i][3] = $09e991522ca7e64e$var$state[i][2] * 2;\n                    $09e991522ca7e64e$var$state[i][2] = $09e991522ca7e64e$var$state[i][1] * 2;\n                    $09e991522ca7e64e$var$state[i][1] = 0;\n                    $09e991522ca7e64e$var$state[i][0] = 0;\n                    isSomethingChanged = true;\n                    iWasUsed.push(i);\n                    $09e991522ca7e64e$var$filledCells -= 2;\n                    continue;\n                }\n                $09e991522ca7e64e$var$state[i][j + 1] *= 2;\n                $09e991522ca7e64e$var$state[i][j] = 0;\n                isSomethingChanged = true;\n                iWasUsed.push(i);\n                $09e991522ca7e64e$var$filledCells--;\n            }\n            if ($09e991522ca7e64e$var$state[i][j + 1] === 0 && $09e991522ca7e64e$var$state[i][j] !== 0) {\n                [$09e991522ca7e64e$var$state[i][j + 1], $09e991522ca7e64e$var$state[i][j]] = [\n                    $09e991522ca7e64e$var$state[i][j],\n                    $09e991522ca7e64e$var$state[i][j + 1]\n                ];\n                isSomethingChanged = true;\n            }\n        }\n    }\n    if (isSomethingChanged) $09e991522ca7e64e$var$addRandomNumInCells();\n};\n\n\n//# sourceMappingURL=index.79e1cde7.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst Game = require('../modules/Game.class');\nconst game = new Game(initialState);\n\nlet filledCells = 0;\nconst score = document.querySelector('.game-score');\n\nlet state = structuredClone(initialState);\n\nconst cells = document.querySelectorAll('.field-cell');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', () => {\n  if (button.className === 'button restart') {\n    game.restart();\n  }\n\n  if (button.className === 'button start') {\n    game.start();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.keyCode) {\n    case 37:\n      game.moveLeft();\n      break;\n    case 38:\n      game.moveUp();\n      break;\n    case 39:\n      game.moveRight();\n      break;\n    case 40:\n      game.moveDown();\n  }\n\n  if ([...cells].some((cell) => cell.textContent === '2048')) {\n    messageWin.className = 'message message-win';\n  }\n\n  if (filledCells === cells.length && !canGameContinue()) {\n    messageLose.className = 'message message-lose';\n  }\n});\n\ngame.start = () => {\n  messageStart.className = 'message message-start hidden';\n  messageLose.className = 'message message-lose hidden';\n  messageWin.className = 'message message-win hidden';\n  button.className = 'button restart';\n  button.textContent = 'Restart';\n  addRandomNumInCells();\n  addRandomNumInCells();\n};\n\ngame.restart = () => {\n  filledCells = 0;\n  score.textContent = 0;\n  state = structuredClone(initialState);\n  game.start();\n};\n\ngame.getScore = () => {\n  let totalScore = 0;\n\n  for (const raw of state) {\n    totalScore += raw.reduce((sum, num) => sum + num);\n  }\n\n  return totalScore;\n};\n\nfunction addRandomNumInCells() {\n  let randomRowIndex = Math.round(Math.random() * 3);\n  let randomColumnIndex = Math.round(Math.random() * 3);\n  const cellTextContent = Math.random() < 0.1 ? 4 : 2;\n\n  while (\n    state[randomRowIndex][randomColumnIndex] > 0\n    && filledCells < cells.length\n  ) {\n    randomRowIndex = Math.round(Math.random() * 3);\n    randomColumnIndex = Math.round(Math.random() * 3);\n  }\n\n  state[randomRowIndex][randomColumnIndex] = cellTextContent;\n  filledCells++;\n  score.textContent = game.getScore();\n  changeRealState();\n}\n\nfunction changeRealState() {\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].textContent\n      = state[Math.floor(i / 4)][i % 4] === 0\n        ? ''\n        : state[Math.floor(i / 4)][i % 4];\n\n    cells[i].className\n      = state[Math.floor(i / 4)][i % 4] === 0\n        ? 'field-cell'\n        : `field-cell field-cell--${state[Math.floor(i / 4)][i % 4]}`;\n  }\n}\n\nfunction canGameContinue() {\n  let isSomethingChanged = false;\n\n  for (let i = state.length - 2; i >= 0; i--) {\n    for (let j = 0; j < state[i].length; j++) {\n      if (state[i + 1][j] === state[i][j] && state[i][j] !== 0) {\n        isSomethingChanged = true;\n      }\n    }\n  }\n\n  for (let i = state.length - 1; i > 0; i--) {\n    for (let j = 0; j < state[i].length; j++) {\n      if (state[i - 1][j] === state[i][j] && state[i][j] !== 0) {\n        isSomethingChanged = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = 1; j < state[i].length; j++) {\n      if (state[i][j - 1] === state[i][j] && state[i][j] !== 0) {\n        isSomethingChanged = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = state[i].length - 2; j >= 0; j--) {\n      if (state[i][j + 1] === state[i][j] && state[i][j] !== 0) {\n        isSomethingChanged = true;\n      }\n    }\n  }\n\n  return isSomethingChanged;\n}\n\ngame.moveDown = () => {\n  let isSomethingChanged = false;\n  const jWasUsed = [];\n\n  for (let n = 0; n < state.length; n++) {\n    for (let i = state.length - 2; i >= 0; i--) {\n      for (let j = 0; j < state[i].length; j++) {\n        if (\n          state[i + 1][j] === state[i][j]\n          && state[i][j] !== 0\n          && jWasUsed.every((ind) => ind !== j)\n        ) {\n          if (\n            state[0][j] !== 0\n            && state[3][j] !== 0\n            && state[0][j] === state[1][j]\n            && state[2][j] === state[3][j]\n          ) {\n            state[3][j] = state[2][j] * 2;\n            state[2][j] = state[1][j] * 2;\n            state[1][j] = 0;\n            state[0][j] = 0;\n            isSomethingChanged = true;\n            jWasUsed.push(j);\n            filledCells -= 2;\n            continue;\n          }\n          state[i + 1][j] *= 2;\n          state[i][j] = 0;\n          isSomethingChanged = true;\n          jWasUsed.push(j);\n          filledCells--;\n        }\n\n        if (state[i + 1][j] === 0 && state[i][j] !== 0) {\n          [state[i + 1][j], state[i][j]] = [state[i][j], state[i + 1][j]];\n          isSomethingChanged = true;\n        }\n      }\n    }\n  }\n\n  if (isSomethingChanged) {\n    addRandomNumInCells();\n  }\n};\n\ngame.moveUp = () => {\n  let isSomethingChanged = false;\n  const jWasUsed = [];\n\n  for (let n = 0; n < state.length; n++) {\n    for (let i = state.length - 1; i > 0; i--) {\n      for (let j = 0; j < state[i].length; j++) {\n        if (\n          state[i - 1][j] === state[i][j]\n          && state[i][j] !== 0\n          && jWasUsed.every((ind) => ind !== j)\n        ) {\n          if (\n            state[0][j] !== 0\n            && state[3][j] !== 0\n            && state[0][j] === state[1][j]\n            && state[2][j] === state[3][j]\n          ) {\n            state[0][j] = state[1][j] * 2;\n            state[1][j] = state[2][j] * 2;\n            state[2][j] = 0;\n            state[3][j] = 0;\n            isSomethingChanged = true;\n            jWasUsed.push(j);\n            filledCells -= 2;\n            continue;\n          }\n          state[i - 1][j] *= 2;\n          state[i][j] = 0;\n          isSomethingChanged = true;\n          jWasUsed.push(j);\n          filledCells--;\n        }\n\n        if (state[i - 1][j] === 0 && state[i][j] !== 0) {\n          [state[i - 1][j], state[i][j]] = [state[i][j], state[i - 1][j]];\n          isSomethingChanged = true;\n        }\n      }\n    }\n  }\n\n  if (isSomethingChanged) {\n    addRandomNumInCells();\n  }\n};\n\ngame.moveLeft = () => {\n  let isSomethingChanged = false;\n  const iWasUsed = [];\n\n  for (let n = 0; n < state.length; n++) {\n    for (let i = 0; i < state.length; i++) {\n      for (let j = 1; j < state[i].length; j++) {\n        if (\n          state[i][j - 1] === state[i][j]\n          && state[i][j] !== 0\n          && iWasUsed.every((ind) => ind !== i)\n        ) {\n          if (\n            state[i][0] !== 0\n            && state[i][3] !== 0\n            && state[i][0] === state[i][1]\n            && state[i][2] === state[i][3]\n          ) {\n            state[i][0] = state[i][1] * 2;\n            state[i][1] = state[i][2] * 2;\n            state[i][2] = 0;\n            state[i][3] = 0;\n            isSomethingChanged = true;\n            iWasUsed.push(i);\n            filledCells -= 2;\n            continue;\n          }\n          state[i][j - 1] *= 2;\n          state[i][j] = 0;\n          isSomethingChanged = true;\n          iWasUsed.push(i);\n          filledCells--;\n        }\n\n        if (state[i][j - 1] === 0 && state[i][j] !== 0) {\n          [state[i][j - 1], state[i][j]] = [state[i][j], state[i][j - 1]];\n          isSomethingChanged = true;\n        }\n      }\n    }\n  }\n\n  if (isSomethingChanged) {\n    addRandomNumInCells();\n  }\n};\n\ngame.moveRight = () => {\n  let isSomethingChanged = false;\n  const iWasUsed = [];\n\n  for (let n = 0; n < state.length; n++) {\n    for (let i = 0; i < state.length; i++) {\n      for (let j = state[i].length - 2; j >= 0; j--) {\n        if (\n          state[i][j + 1] === state[i][j]\n          && state[i][j] !== 0\n          && iWasUsed.every((ind) => ind !== i)\n        ) {\n          if (\n            state[i][0] !== 0\n            && state[i][3] !== 0\n            && state[i][0] === state[i][1]\n            && state[i][2] === state[i][3]\n          ) {\n            state[i][3] = state[i][2] * 2;\n            state[i][2] = state[i][1] * 2;\n            state[i][1] = 0;\n            state[i][0] = 0;\n            isSomethingChanged = true;\n            iWasUsed.push(i);\n            filledCells -= 2;\n            continue;\n          }\n          state[i][j + 1] *= 2;\n          state[i][j] = 0;\n          isSomethingChanged = true;\n          iWasUsed.push(i);\n          filledCells--;\n        }\n\n        if (state[i][j + 1] === 0 && state[i][j] !== 0) {\n          [state[i][j + 1], state[i][j]] = [state[i][j], state[i][j + 1]];\n          isSomethingChanged = true;\n        }\n      }\n    }\n  }\n\n  if (isSomethingChanged) {\n    addRandomNumInCells();\n  }\n};\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.initialState = initialState;\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n  }\n\n  moveLeft() {}\n  moveRight() {}\n  moveUp() {}\n  moveDown() {}\n\n  /**\n   * @returns {number}\n   */\n  getScore() {}\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {}\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {}\n\n  /**\n   * Starts the game.\n   */\n  start() {}\n\n  /**\n   * Resets the game.\n   */\n  restart() {}\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$initialState","$09e991522ca7e64e$var$game","constructor","initialState","console","log","moveLeft","moveRight","moveUp","moveDown","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$filledCells","$09e991522ca7e64e$var$score","document","querySelector","$09e991522ca7e64e$var$state","structuredClone","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$addRandomNumInCells","randomRowIndex","Math","round","random","randomColumnIndex","cellTextContent","length","textContent","$09e991522ca7e64e$var$changeRealState","i","floor","className","addEventListener","e","keyCode","some","cell","$09e991522ca7e64e$var$canGameContinue","isSomethingChanged","j","totalScore","raw","reduce","sum","num","jWasUsed","n","every","ind","push","iWasUsed"],"version":3,"file":"index.79e1cde7.js.map"}